name: Deploy Application

on:
  push:
    branches:
      - master # Monitor changes in the master branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URL }}

      - name: Build and Tag Web Image # nodejs App
        run: |
          docker build -t toptal-app:v1.0.0 ./applications/web
          docker tag toptal-app:v1.0.0 ${{ secrets.ECR_REPO_URL }}/toptal-app:v1.0.0

      - name: Push Web Image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL }}/toptal-app:v1.0.0

      - name: Build and Tag API Image # nodejs API
        run: |
          docker build -t toptal-api:v1.0.0 ./applications/api
          docker tag toptal-api:v1.0.0 ${{ secrets.ECR_REPO_URL }}/toptal-api:v1.0.0

      - name: Push API Image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL }}/toptal-api:v1.0.0
      
      - name: Build and Tag App image # javascript web app (testing)
        run: |
          docker build -t construction:v1.0.0 ./applications/app
          docker tag construction:v1.0.0 ${{ secrets.ECR_REPO_URL }}/construction:v1.0.0
  
      - name: Push App Image to ECR
        run: |
          docker push ${{ secrets.ECR_REPO_URL }}/construction:v1.0.0

    

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Deploy Applications Helm Chart
        run: |
          helm upgrade --install nonso-app ./applications/helm \
            --set api.db.host=${{ secrets.DB_HOST }} \
            --set api.db.user=${{ secrets.DB_USER }} \
            --set api.db.password=${{ secrets.DB_PASSWORD }} \
            --set api.db.name=${{ secrets.DB_NAME }}

      - name: Deploy Monitoring Helm Chart
        run: |
          helm upgrade --install prometheus-stack ./applications/monitoring -n monitoring